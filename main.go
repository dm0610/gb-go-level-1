/******************
Немного усложнил первое упражнение, поскольку я немного щупал мне оно показалось несколько простым.
*******************/
package main

//импортирую пакеты для обработки ошибок, форматированной работы с текстом, логирования, математических операций,
//обработки строк, и работы с временем. Этот пример я прорабатывал при чтении книги go workshop)
import (
	"errors"
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"time"
)

//Создаю слайс с типом string
var helloList = []string{
	"Hello, world",
	"Сәлем Әлем",
	"Witaj świecie",
	"Hola Mundo",
	"Привет, мир",
}

func main() {
	// Засеиваю генератор рандомных чисел.
	// Для этого использую функцию вызова времени в формате UnixNano
	rand.Seed(time.Now().UnixNano())
	// После засеивания генерируем собственно само число. После python'а этот процесс несколько странно выглядит.
	// но вроде бы в C и C++ выглядит примерно также
	index := rand.Intn(len(helloList))
	// далее вызываю функцию hello() возвращающую два значения.
	hello_msg, err := hello(index)
	// Обрабатываю ошибку err, в книжке "headfirst Go" говорят, что их надо всегда обрабатывать, но я пока только учусь и плохо это умею
	if err != nil {
		log.Fatal(err)
	}
	//вывожу значение hello_msg
	fmt.Println(hello_msg)
}

//Функция, которая принимает в себя рандомный индекс и если он в рабочих пределах - возвращает нужное значение
// из слайса helloList
func hello(index int) (string, error) {
	if index < 0 || index > len(helloList)-1 {
		// Создаём ошибку-сообщение, если вдруг индекс выпадает из диапазона индексов слайса(функция Itoa переводит значение int в строку ASCII).
		return "", errors.New("out of range: " + strconv.Itoa(index))
	}
	return helloList[index], nil
}
